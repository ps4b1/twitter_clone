# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe PostsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  login_user

  let(:valid_attributes) do
    {
      'id' => '1',
      'content' => 'new post'
    }
  end

  let(:invalid_attributes) do
    {
      'id' => 'a',
      'content' => '1'
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      post=Post.new(valid_attributes)
      post.user = user
      post.save
      get :index
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      post=Post.new(valid_attributes)
      post.user = user
      post.save
      get :show, params: { id: post.id }
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      post=Post.new(valid_attributes)
      post.user = user
      post.save
      puts post.id
      get :edit, params: { id: post.id }
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get :new
      expect(response).to be_successful
    end
  end


  describe 'POST /create' do
    context 'with valid parameters' do

      it 'does creates a Post' do
        expect do
          post :create, params: { post: valid_attributes }
        end.to change(Post, :count).by(1)
      end

      it 'redirects to the created post' do
        post :create, params: { post: valid_attributes }
        expect(response).to redirect_to(post_url(Post.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a Post' do
        expect do
          post :create, params: { post: invalid_attributes }
        end.to change(Post, :count).by(0)
      end

      it "renders a successful response" do
        post :create, params: { post: invalid_attributes }
        expect(response).to render_template('posts/new')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          'content' => 'edited'
        }
      end

      it 'updates the requested post' do
        post=Post.new(valid_attributes)
        post.user = user
        post.save
        patch :update, params: { id: post.id, post: new_attributes }
        post.reload
        puts post.content
        expect(response).to be_redirect
      end

      it 'redirects to the post' do
        post=Post.new(valid_attributes)
        post.user = user
        post.save
        patch :update, params: { id: post.id, post: new_attributes }
        post.reload
        expect(response).to redirect_to(post_url(post))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        post=Post.new(valid_attributes)
        post.user = user
        post.save
        patch :update, params: { id: post.id, post: invalid_attributes }
        expect(response).to render_template("posts/edit")
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested post' do
      post=Post.new(valid_attributes)
      post.user = user
      post.save
      expect do
        delete :destroy, params: {id: post.id}
      end.to change(Post, :count).by(-1)

    end

    it 'redirects to the posts list' do
      post=Post.new(valid_attributes)
      post.user = user
      post.save
      delete :destroy, params: {id: post.id}
      expect(response).to redirect_to(profile_path(user))
    end
  end
end
